version: '3.8'

services:
  mysql:
    image: mysql:8
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: workforce
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppass
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"   # main connection
      - "15672:15672" # management UI

  redis:
    image: redis:7
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DB_HOST: mysql
      DB_USER: appuser
      DB_PASS: apppass
      DB_NAME: workforce
      DB_PORT: 3306
      RABBITMQ_URL: amqp://rabbitmq
      REDIS_HOST: redis           # âœ… ensure internal hostname is set
      REDIS_PORT: 6379
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "4000:4000"
    env_file:
      - .env                     # optional if you have extra vars like JWT keys

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DB_HOST: mysql
      DB_USER: appuser
      DB_PASS: apppass
      DB_NAME: workforce
      DB_PORT: 3306
      RABBITMQ_URL: amqp://rabbitmq
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started

volumes:
  mysql-data:
  redis-data:
